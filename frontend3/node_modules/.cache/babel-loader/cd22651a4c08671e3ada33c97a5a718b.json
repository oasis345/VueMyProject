{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\chae190702\\\\frontend3\\\\src\\\\containers\\\\customer\\\\TodoApp.jsx\";\nimport React, { Component } from 'react';\nimport TodoList from './TodoList';\n\nclass TodoApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      text: ''\n    };\n    this.a = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"TODO\"), React.createElement(TodoList, {\n      items: this.state.items,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"new-todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"What needs to be done?\"), React.createElement(\"input\", {\n      id: \"new-todo\",\n      onChange: this.a,\n      value: this.state.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Add #\", this.state.items.length + 1)));\n  }\n\n  handleChange(e) {\n    this.setState({\n      text: e.target.value\n    }); //값을 보낸다 클릭했을떄 이벤트에서 부모한태 값을 보낸다 setState\n  } //e.target.value 이벤트가 걸릴 대상\n\n\n  handleSubmit(e) {\n    e.preventDefault(); //폼태그에서 전송되는 submit을 막는다\n\n    if (!this.state.text.length) {\n      return;\n    }\n\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      // 기존에 있던 배열에 배열을 추가해줌\n      text: ''\n    }));\n  }\n\n}\n\nexport default TodoApp;","map":{"version":3,"sources":["C:\\Users\\user\\chae190702\\frontend3\\src\\containers\\customer\\TodoApp.jsx"],"names":["React","Component","TodoList","TodoApp","constructor","props","state","items","text","a","handleChange","bind","handleSubmit","render","length","e","setState","target","value","preventDefault","newItem","id","Date","now","concat"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AACA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAb;AACA,SAAKC,CAAL,GAAS,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAT;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAM,MAAA,QAAQ,EAAE,KAAKK,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAIE;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,QAAQ,EAAE,KAAKH,CAFjB;AAGE,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWE,IAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACQ,KAAKF,KAAL,CAAWC,KAAX,CAAiBO,MAAjB,GAA0B,CADlC,CATF,CAHF,CADF;AAmBD;;AAEDJ,EAAAA,YAAY,CAACK,CAAD,EAAI;AACd,SAAKC,QAAL,CAAc;AAAER,MAAAA,IAAI,EAAEO,CAAC,CAACE,MAAF,CAASC;AAAjB,KAAd,EADc,CAC+C;AACpE,GAhC+B,CAgC6B;;;AAEvDN,EAAAA,YAAY,CAACG,CAAD,EAAI;AACdA,IAAAA,CAAC,CAACI,cAAF,GADc,CACQ;;AACtB,QAAI,CAAC,KAAKb,KAAL,CAAWE,IAAX,CAAgBM,MAArB,EAA6B;AAC3B;AACD;;AACD,UAAMM,OAAO,GAAG;AACdZ,MAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE,IADH;AAEda,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL;AAFU,KAAhB;AAIA,SAAKP,QAAL,CAAcV,KAAK,KAAK;AACtBC,MAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYiB,MAAZ,CAAmBJ,OAAnB,CADe;AACc;AACpCZ,MAAAA,IAAI,EAAE;AAFgB,KAAL,CAAnB;AAID;;AA/CyB;;AAoDhC,eAAeL,OAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport TodoList from './TodoList'\r\nclass TodoApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { items: [], text: '' };\r\n        this.a = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <div>\r\n            <h3>TODO</h3>\r\n            <TodoList items={this.state.items} />\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label htmlFor=\"new-todo\">\r\n                What needs to be done?\r\n              </label>\r\n              <input\r\n                id=\"new-todo\"\r\n                onChange={this.a}\r\n                value={this.state.text}\r\n              />\r\n              <button>\r\n                Add #{this.state.items.length + 1}\r\n              </button>\r\n            </form>\r\n          </div>\r\n        );\r\n      }\r\n    \r\n      handleChange(e) {\r\n        this.setState({ text: e.target.value });                     //값을 보낸다 클릭했을떄 이벤트에서 부모한태 값을 보낸다 setState\r\n}                                                            //e.target.value 이벤트가 걸릴 대상\r\n    \r\n      handleSubmit(e) {\r\n        e.preventDefault();   //폼태그에서 전송되는 submit을 막는다\r\n        if (!this.state.text.length) {\r\n          return;\r\n        }\r\n        const newItem = {\r\n          text: this.state.text,\r\n          id: Date.now()\r\n        };\r\n        this.setState(state => ({\r\n          items: state.items.concat(newItem), // 기존에 있던 배열에 배열을 추가해줌\r\n          text: ''\r\n        }));\r\n      }\r\n    }\r\n    \r\n    \r\n   \r\nexport default TodoApp;"]},"metadata":{},"sourceType":"module"}